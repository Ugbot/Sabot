#ifndef TONBO_FFI_H
#define TONBO_FFI_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>


/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct TonboDb TonboDb;

typedef struct TonboIter TonboIter;

/**
 * Open a Tonbo database at the given path
 *
 * Returns NULL on failure
 */
struct TonboDb *tonbo_db_open(const char *path);

/**
 * Get a value by key
 *
 * Returns:
 *   0 on success (value_out and value_len_out are set)
 *   -1 if key not found
 *   -2 on error
 */
int tonbo_db_get(struct TonboDb *db,
                 const char *key,
                 uintptr_t key_len,
                 uint8_t **value_out,
                 uintptr_t *value_len_out);

/**
 * Insert a key-value pair
 *
 * Returns:
 *   0 on success
 *   -1 on error
 */
int tonbo_db_insert(struct TonboDb *db,
                    const char *key,
                    uintptr_t key_len,
                    const uint8_t *value,
                    uintptr_t value_len);

/**
 * Delete a key
 *
 * Returns:
 *   0 on success
 *   -1 if key not found
 *   -2 on error
 */
int tonbo_db_delete(struct TonboDb *db, const char *key, uintptr_t key_len);

/**
 * Close the database
 */
void tonbo_db_close(struct TonboDb *db);

/**
 * Free bytes allocated by tonbo_db_get
 */
void tonbo_free_bytes(uint8_t *ptr, uintptr_t len);

struct TonboIter *tonbo_db_scan(struct TonboDb *_db,
                                const char *_start_key,
                                const char *_end_key,
                                int _limit);

int tonbo_iter_next(struct TonboIter *_iter,
                    char **_key_out,
                    uint8_t **_value_out,
                    uintptr_t *_value_len_out);

void tonbo_iter_free(struct TonboIter *_iter);

#ifdef __cplusplus
}
#endif

#endif /* TONBO_FFI_H */
